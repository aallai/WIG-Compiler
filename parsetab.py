
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'I#\t\xc2\x96=\xcb\x86W\x83Vo\xd0d\x83\xb6'
    
_lr_action_items = {'CONST':([3,5,70,88,],[4,4,-5,-4,]),'TADD':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,147,-112,147,-105,-106,147,147,-86,147,147,-120,-92,-103,-100,-101,-88,-97,-93,-95,-94,-96,-89,-90,-87,-98,-91,-99,-114,-108,-113,147,-104,-102,147,]),'SERVICE':([0,],[2,]),'GTEQ':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,144,-112,144,-105,-106,144,144,None,144,144,-120,None,-103,144,-101,None,-97,-93,-95,-94,-96,None,None,None,144,None,144,-114,-108,-113,144,-104,-102,144,]),'START_TAG':([36,51,52,53,78,79,95,96,97,162,],[50,-11,50,-12,-10,-9,-13,-8,50,-14,]),'VOID':([5,6,8,10,11,12,15,17,20,25,27,32,35,39,42,56,63,70,72,88,90,98,101,137,],[-2,-23,-3,-24,-25,22,-26,-34,22,22,22,22,-36,22,-37,-27,22,-5,-32,-4,22,22,-50,-77,]),'HTML':([4,],[7,]),'END_HOLE':([64,],[78,]),'WHATEVER':([36,51,52,53,78,79,95,96,97,162,],[51,-11,51,-12,-10,-9,-13,-8,51,-14,]),'WHILE':([17,25,35,42,98,104,108,112,122,128,137,154,163,178,200,210,219,236,],[-34,-35,-36,-37,-33,107,-71,-63,107,-66,-77,-72,-67,-65,-64,-70,-68,-69,]),'META':([36,51,52,53,78,79,95,96,97,162,],[53,-11,53,-12,-10,-9,-13,-8,53,-14,]),'LSHIFT':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,146,-112,146,-105,-106,146,146,-86,146,146,-120,-92,-103,-100,-101,-88,-97,-93,-95,-94,-96,-89,-90,-87,-98,-91,-99,-114,-108,-113,146,-104,-102,146,]),'START_HOLE':([36,51,52,53,78,79,95,96,97,162,],[48,-11,48,-12,-10,-9,-13,-8,48,-14,]),'RETURN':([17,25,35,42,98,104,108,112,122,128,137,154,163,178,200,210,219,236,],[-34,-35,-36,-37,-33,106,-71,-63,106,-66,-77,-72,-67,-65,-64,-70,-68,-69,]),'TRUE':([17,25,35,42,98,104,106,108,111,112,113,122,125,128,130,131,137,138,139,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,163,178,200,204,206,210,219,226,236,],[-34,-35,-36,-37,-33,116,116,-71,116,-63,116,116,116,-66,116,116,-77,116,116,116,116,116,116,116,116,116,116,-72,116,116,116,116,116,116,-67,-65,-64,116,116,-70,-68,116,-69,]),'END_TAG':([65,66,67,68,80,81,82,83,84,85,86,87,94,102,127,],[79,-15,-15,-15,-19,-17,95,-16,-21,-22,96,97,-18,-20,162,]),'SELECT':([50,105,],[68,127,]),'NEQ':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,148,-112,148,-105,-106,148,148,None,148,148,-120,None,-103,148,-101,None,-97,-93,-95,-94,-96,None,None,None,148,None,148,-114,-108,-113,148,-104,-102,148,]),'!':([17,25,35,42,98,104,106,108,111,112,113,122,125,128,130,131,137,138,139,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,163,178,200,204,206,210,219,226,236,],[-34,-35,-36,-37,-33,113,113,-71,113,-63,113,113,113,-66,113,113,-77,113,113,113,113,113,113,113,113,113,113,-72,113,113,113,113,113,113,-67,-65,-64,113,113,-70,-68,113,-69,]),'%':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,149,-112,149,-105,-106,149,149,149,149,149,-120,149,-103,149,-101,149,-97,149,-95,149,-96,149,149,149,149,149,149,-114,-108,-113,149,-104,-102,149,]),']':([110,116,118,119,120,126,132,133,165,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,201,203,205,211,213,214,216,217,223,224,232,233,234,235,],[-107,-110,-119,-111,-109,-112,-105,-106,-86,-120,-92,-103,-100,-101,-88,-97,-93,-95,-94,-96,-89,-90,-87,-98,-91,-99,-114,-81,-108,-113,-78,227,228,-82,-83,-104,-102,-79,-80,-85,-84,]),')':([28,59,63,73,74,75,76,92,100,110,116,118,119,120,126,132,133,139,161,164,165,169,170,171,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,208,209,220,223,224,],[-38,-39,-51,89,-52,-53,91,-55,-54,-107,-110,-119,-111,-109,-112,-105,-106,-115,197,198,-86,202,-116,203,-117,-120,-92,-103,-100,-101,-88,-97,-93,-95,-94,-96,-89,-90,-87,-98,-91,-99,-114,-108,-113,223,224,-118,-104,-102,]),'(':([17,25,35,42,46,61,98,104,106,107,108,111,112,113,117,118,122,125,128,130,131,137,138,139,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,163,178,200,204,206,210,219,226,236,],[-34,-35,-36,-37,63,73,-33,125,125,130,-71,125,-63,125,138,139,125,125,-66,125,125,-77,125,125,125,180,125,183,125,125,125,125,125,125,-72,125,125,125,125,125,125,-67,-65,-64,125,125,-70,-68,125,-69,]),'+':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,150,-112,150,-105,-106,150,150,150,150,150,-120,150,-103,150,-101,150,-97,-93,-95,-94,-96,150,150,150,150,150,150,-114,-108,-113,150,-104,-102,150,]),'*':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,151,-112,151,-105,-106,151,151,151,151,151,-120,151,-103,151,-101,151,-97,151,-95,151,-96,151,151,151,151,151,151,-114,-108,-113,151,-104,-102,151,]),'-':([17,25,35,42,98,104,106,108,110,111,112,113,116,118,119,120,122,124,125,126,128,129,130,131,132,133,137,138,139,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,169,172,173,178,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,200,203,204,205,206,210,219,221,223,224,226,233,236,],[-34,-35,-36,-37,-33,111,111,-71,-107,111,-63,111,-110,-119,-111,-109,111,152,111,-112,-66,152,111,111,-105,-106,-77,111,111,111,111,111,111,111,111,111,111,-72,111,111,111,111,111,111,152,-67,152,152,152,152,-120,-65,152,-103,152,-101,152,-97,-93,-95,-94,-96,152,152,152,152,152,152,-114,-64,-108,111,-113,111,-70,-68,152,-104,-102,111,152,-69,]),',':([28,75,92,110,116,118,119,120,126,132,133,165,172,173,177,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,211,217,221,223,224,233,234,],[41,90,-55,-107,-110,-119,-111,-109,-112,-105,-106,-86,204,-120,207,-92,-103,-100,-101,-88,-97,-93,-95,-94,-96,-89,-90,-87,-98,-91,-99,-114,-108,-113,225,230,-125,-104,-102,-80,-85,]),'/':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,153,-112,153,-105,-106,153,153,153,153,153,-120,153,-103,153,-101,153,-97,153,-95,153,-96,153,153,153,153,153,153,-114,-108,-113,153,-104,-102,153,]),'.':([118,218,],[140,140,]),'SESSION':([5,6,8,10,11,12,15,17,20,25,30,32,33,35,42,43,47,56,70,88,99,101,137,],[-2,-23,-3,-24,-25,-33,-26,-34,-46,-35,44,-48,-47,-36,-37,44,-49,-27,-5,-4,-58,-50,-77,]),'BOOL':([5,6,8,10,11,12,15,17,20,25,27,32,35,39,42,56,63,70,72,88,90,98,101,137,],[-2,-23,-3,-24,-25,23,-26,-34,23,23,23,23,-36,23,-37,-27,23,-5,-32,-4,23,23,-50,-77,]),';':([17,25,28,29,35,42,54,58,59,71,98,104,106,108,110,112,116,118,119,120,122,124,126,128,129,132,133,135,136,137,143,154,163,165,167,173,178,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,200,203,205,210,219,223,224,227,228,236,],[-34,-35,-38,42,-36,-37,70,72,-39,88,-33,112,128,-71,-107,-63,-110,-119,-111,-109,112,154,-112,-66,163,-105,-106,-75,-73,-77,178,-72,-67,-86,200,-120,-65,-92,-103,-100,-101,-88,-97,-93,-95,-94,-96,-89,-90,-87,-98,-91,-99,-114,-64,-108,-113,-70,-68,-104,-102,-74,-76,-69,]),'IDENTIFIER':([7,9,16,17,18,19,21,22,23,24,25,31,34,35,40,41,42,44,48,49,50,66,67,68,77,80,81,84,85,93,98,102,104,106,108,111,112,113,114,122,123,125,128,130,131,134,137,138,139,140,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,163,178,180,183,199,200,201,204,206,207,210,219,225,226,229,230,236,],[13,14,-44,-34,-40,28,34,-43,-41,-42,-35,46,-45,-36,58,28,-37,61,64,65,67,84,84,84,92,-19,84,-21,-22,84,-33,-20,118,118,-71,118,-63,118,136,118,136,118,-66,118,118,166,-77,118,118,173,176,118,181,118,184,118,118,118,118,118,118,-72,118,118,118,118,118,118,-67,-65,28,28,212,-64,218,118,118,176,-70,-68,212,118,234,218,-69,]),'=':([13,80,84,85,110,118,173,176,212,215,218,],[26,93,-21,-22,131,-119,-120,206,226,229,-119,]),'<':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,155,-112,155,-105,-106,155,155,None,155,155,-120,None,-103,155,-101,None,-97,-93,-95,-94,-96,None,None,None,155,None,155,-114,-108,-113,155,-104,-102,155,]),'SCHEMA':([5,6,8,11,56,70,88,],[-2,9,-3,9,-27,-5,-4,]),'PLUG':([114,123,],[134,134,]),'STRING':([5,6,8,10,11,12,15,17,20,25,27,32,35,39,42,56,63,70,72,88,90,98,101,137,],[-2,-23,-3,-24,-25,24,-26,-34,24,24,24,24,-36,24,-37,-27,24,-5,-32,-4,24,24,-50,-77,]),'SHOW':([17,25,35,42,98,104,108,112,122,128,137,154,163,178,200,210,219,236,],[-34,-35,-36,-37,-33,114,-71,-63,114,-66,-77,-72,-67,-65,-64,-70,-68,-69,]),'RECEIVE':([135,136,227,],[168,-73,-74,]),'ELSE':([137,219,],[-77,231,]),'>':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,156,-112,156,-105,-106,156,156,None,156,156,-120,None,-103,156,-101,None,-97,-93,-95,-94,-96,None,None,None,156,None,156,-114,-108,-113,156,-104,-102,156,]),'TSUB':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,145,-112,145,-105,-106,145,145,-86,145,145,-120,-92,-103,-100,-101,-88,-97,-93,-95,-94,-96,-89,-90,-87,-98,-91,-99,-114,-108,-113,145,-104,-102,145,]),'START_CLOSE_TAG':([36,51,52,53,69,78,79,95,96,97,103,162,],[49,-11,49,-12,-7,-10,-9,-13,-8,49,105,-14,]),'INPUT':([50,],[66,]),'[':([166,168,],[199,201,]),'EQ':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,157,-112,157,-105,-106,157,157,None,157,157,-120,None,-103,157,-101,None,-97,-93,-95,-94,-96,None,None,None,157,None,157,-114,-108,-113,157,-104,-102,157,]),'IF':([17,25,35,42,98,104,108,112,122,128,137,154,163,178,200,210,219,236,],[-34,-35,-36,-37,-33,117,-71,-63,117,-66,-77,-72,-67,-65,-64,-70,-68,-69,]),'AND':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,158,-112,158,-105,-106,158,158,-86,158,158,-120,-92,-103,158,-101,-88,-97,-93,-95,-94,-96,-89,-90,-87,-98,-91,-99,-114,-108,-113,158,-104,-102,158,]),'FALSE':([17,25,35,42,98,104,106,108,111,112,113,122,125,128,130,131,137,138,139,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,163,178,200,204,206,210,219,226,236,],[-34,-35,-36,-37,-33,119,119,-71,119,-63,119,119,119,-66,119,119,-77,119,119,119,119,119,119,119,119,119,119,-72,119,119,119,119,119,119,-67,-65,-64,119,119,-70,-68,119,-69,]),'STRING_LITERAL':([17,25,35,42,66,67,68,80,81,84,85,93,98,102,104,106,108,111,112,113,122,125,128,130,131,137,138,139,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,163,178,200,204,206,210,219,226,236,],[-34,-35,-36,-37,85,85,85,-19,85,-21,-22,85,-33,-20,120,120,-71,120,-63,120,120,120,-66,120,120,-77,120,120,120,120,120,120,120,120,120,120,-72,120,120,120,120,120,120,-67,-65,-64,120,120,-70,-68,120,-69,]),'TUPLE':([5,6,8,10,11,12,15,17,20,25,32,35,42,56,63,70,88,90,98,101,104,106,108,111,112,113,122,125,128,130,131,137,138,139,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,163,178,200,204,206,210,219,226,236,],[-2,-23,-3,-24,-25,21,-26,-34,21,21,21,-36,-37,-27,21,-5,-4,21,21,-50,121,121,-71,121,-63,121,121,121,-66,121,121,-77,121,121,121,121,121,121,121,121,121,121,-72,121,121,121,121,121,121,-67,-65,-64,121,121,-70,-68,121,-69,]),'INT':([5,6,8,10,11,12,15,17,20,25,27,32,35,39,42,56,63,70,72,88,90,98,101,137,],[-2,-23,-3,-24,-25,18,-26,-34,18,18,18,18,-36,18,-37,-27,18,-5,-32,-4,18,18,-50,-77,]),'LTEQ':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,159,-112,159,-105,-106,159,159,None,159,159,-120,None,-103,159,-101,None,-97,-93,-95,-94,-96,None,None,None,159,None,159,-114,-108,-113,159,-104,-102,159,]),'END_HTML_LITERAL':([36,51,52,53,55,69,78,79,95,96,162,],[54,-11,-6,-12,71,-7,-10,-9,-13,-8,-14,]),'START_HTML_LITERAL':([26,],[36,]),'EXIT':([17,25,35,42,98,104,108,112,122,128,137,154,163,178,200,210,219,236,],[-34,-35,-36,-37,-33,123,-71,-63,123,-66,-77,-72,-67,-65,-64,-70,-68,-69,]),'INT_LITERAL':([17,25,35,42,98,104,106,108,111,112,113,122,125,128,130,131,137,138,139,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,163,178,200,204,206,210,219,226,236,],[-34,-35,-36,-37,-33,126,126,-71,126,-63,126,126,126,-66,126,126,-77,126,126,126,126,126,126,126,126,126,126,-72,126,126,126,126,126,126,-67,-65,-64,126,126,-70,-68,126,-69,]),'{':([2,14,17,25,35,42,89,91,98,104,108,112,121,122,128,137,154,163,178,198,200,202,210,219,231,236,],[3,27,-34,-35,-36,-37,98,98,-33,98,-71,-63,141,98,-66,-77,-72,-67,-65,98,-64,98,-70,-68,98,-69,]),'$end':([1,62,],[0,-1,]),'}':([17,25,27,35,37,38,39,42,43,45,57,60,72,98,99,104,108,109,110,112,115,116,118,119,120,122,126,128,132,133,137,141,142,154,163,165,173,174,175,177,178,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,200,203,205,207,210,219,221,222,223,224,236,],[-34,-35,-28,-36,-29,56,-30,-37,-56,62,-31,-57,-32,-33,-58,-59,-71,-60,-107,-63,137,-110,-119,-111,-109,-61,-112,-66,-105,-106,-77,-121,-62,-72,-67,-86,-120,-122,205,-123,-65,-92,-103,-100,-101,-88,-97,-93,-95,-94,-96,-89,-90,-87,-98,-91,-99,-114,-64,-108,-113,-121,-70,-68,-125,-124,-104,-102,-69,]),'OR':([110,116,118,119,120,124,126,129,132,133,161,164,165,169,172,173,179,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,205,221,223,224,233,],[-107,-110,-119,-111,-109,160,-112,160,-105,-106,160,160,-86,160,160,-120,-92,-103,160,-101,-88,-97,-93,-95,-94,-96,-89,-90,-87,-98,-91,-99,-114,-108,-113,160,-104,-102,160,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'attribute':([66,67,68,81,],[81,81,81,81,]),'variables':([12,98,],[20,104,]),'argument':([63,90,],[75,75,]),'htmls':([3,5,],[6,8,]),'neattributes':([66,67,68,81,],[83,83,83,94,]),'nehtmlbodies':([36,52,97,],[55,69,103,]),'fieldvalue':([141,207,],[177,177,]),'schemas':([6,],[12,]),'nestms':([104,122,],[109,142,]),'functions':([20,],[30,]),'neexps':([139,204,],[170,220,]),'service':([0,],[1,]),'compoundstm':([89,91,104,122,198,202,231,],[99,101,108,108,210,219,236,]),'htmlbody':([36,52,97,],[52,52,52,]),'field':([27,39,],[39,39,]),'html':([3,5,],[5,5,]),'arguments':([63,],[76,]),'input':([201,230,],[217,217,]),'document':([114,123,],[135,143,]),'type':([12,20,25,32,63,90,98,],[19,31,19,31,77,77,19,]),'nefieldvalues':([141,207,],[174,174,]),'schema':([6,11,],[11,11,]),'function':([20,32,],[32,32,]),'inputs':([201,],[214,]),'nefields':([27,39,],[37,57,]),'nevariables':([12,25,98,],[17,35,17,]),'sessions':([30,43,],[45,60,]),'stms':([104,],[115,]),'neinputs':([201,230,],[216,235,]),'neschemas':([6,11,],[10,15,]),'attributes':([66,67,68,],[82,86,87,]),'variable':([12,25,98,],[25,25,25,]),'plugs':([199,225,],[213,232,]),'plug':([199,225,],[211,211,]),'simpletype':([12,20,25,27,32,39,63,90,98,],[16,16,16,40,16,40,16,16,16,]),'attr':([66,67,68,81,93,],[80,80,80,80,102,]),'nearguments':([63,90,],[74,100,]),'receive':([135,],[167,]),'fields':([27,],[38,]),'identifiers':([19,41,180,183,],[29,59,208,209,]),'stm':([104,122,],[122,122,]),'exps':([139,],[171,]),'session':([30,43,],[43,43,]),'exp':([104,106,111,113,122,125,130,131,138,139,144,146,148,149,150,151,152,153,155,156,157,158,159,160,204,206,226,],[124,129,132,133,124,161,164,165,169,172,179,182,185,186,187,188,189,190,191,192,193,194,195,196,172,221,233,]),'lvalue':([104,106,111,113,122,125,130,131,138,139,144,146,148,149,150,151,152,153,155,156,157,158,159,160,201,204,206,226,230,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,215,110,110,110,215,]),'nefunctions':([20,32,],[33,47,]),'fieldvalues':([141,207,],[175,222,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> service","S'",1,None,None,None),
  ('service -> SERVICE { htmls schemas variables functions sessions }','service',8,'p_service','parser.py',37),
  ('htmls -> html','htmls',1,'p_htmls','parser.py',44),
  ('htmls -> html htmls','htmls',2,'p_htmls','parser.py',45),
  ('html -> CONST HTML IDENTIFIER = START_HTML_LITERAL nehtmlbodies END_HTML_LITERAL ;','html',8,'p_html','parser.py',51),
  ('html -> CONST HTML IDENTIFIER = START_HTML_LITERAL END_HTML_LITERAL ;','html',7,'p_emptyhtml','parser.py',57),
  ('nehtmlbodies -> htmlbody','nehtmlbodies',1,'p_nehtmlbodies','parser.py',63),
  ('nehtmlbodies -> htmlbody nehtmlbodies','nehtmlbodies',2,'p_nehtmlbodies','parser.py',64),
  ('htmlbody -> START_TAG IDENTIFIER attributes END_TAG','htmlbody',4,'p_tag','parser.py',70),
  ('htmlbody -> START_CLOSE_TAG IDENTIFIER END_TAG','htmlbody',3,'p_closing_tag','parser.py',76),
  ('htmlbody -> START_HOLE IDENTIFIER END_HOLE','htmlbody',3,'p_hole','parser.py',82),
  ('htmlbody -> WHATEVER','htmlbody',1,'p_whatever','parser.py',88),
  ('htmlbody -> META','htmlbody',1,'p_meta','parser.py',94),
  ('htmlbody -> START_TAG INPUT attributes END_TAG','htmlbody',4,'p_forminput','parser.py',100),
  ('htmlbody -> START_TAG SELECT attributes END_TAG nehtmlbodies START_CLOSE_TAG SELECT END_TAG','htmlbody',8,'p_select','parser.py',106),
  ('attributes -> <empty>','attributes',0,'p_attributes','parser.py',114),
  ('attributes -> neattributes','attributes',1,'p_attributes','parser.py',115),
  ('neattributes -> attribute','neattributes',1,'p_neattributes','parser.py',121),
  ('neattributes -> attribute neattributes','neattributes',2,'p_neattributes','parser.py',122),
  ('attribute -> attr','attribute',1,'p_attribute','parser.py',128),
  ('attribute -> attr = attr','attribute',3,'p_attribute','parser.py',129),
  ('attr -> IDENTIFIER','attr',1,'p_attr','parser.py',138),
  ('attr -> STRING_LITERAL','attr',1,'p_attr','parser.py',139),
  ('schemas -> <empty>','schemas',0,'p_schemas','parser.py',145),
  ('schemas -> neschemas','schemas',1,'p_schemas','parser.py',146),
  ('neschemas -> schema','neschemas',1,'p_neschemas','parser.py',152),
  ('neschemas -> schema neschemas','neschemas',2,'p_neschemas','parser.py',153),
  ('schema -> SCHEMA IDENTIFIER { fields }','schema',5,'p_schema','parser.py',159),
  ('fields -> <empty>','fields',0,'p_fields','parser.py',164),
  ('fields -> nefields','fields',1,'p_fields','parser.py',165),
  ('nefields -> field','nefields',1,'p_nefields','parser.py',171),
  ('nefields -> field nefields','nefields',2,'p_nefields','parser.py',172),
  ('field -> simpletype IDENTIFIER ;','field',3,'p_field','parser.py',178),
  ('variables -> <empty>','variables',0,'p_variables','parser.py',184),
  ('variables -> nevariables','variables',1,'p_variables','parser.py',185),
  ('nevariables -> variable','nevariables',1,'p_nevariables','parser.py',191),
  ('nevariables -> variable nevariables','nevariables',2,'p_nevariables','parser.py',192),
  ('variable -> type identifiers ;','variable',3,'p_variable','parser.py',198),
  ('identifiers -> IDENTIFIER','identifiers',1,'p_identifiers','parser.py',204),
  ('identifiers -> IDENTIFIER , identifiers','identifiers',3,'p_identifiers','parser.py',205),
  ('simpletype -> INT','simpletype',1,'p_simpletype','parser.py',211),
  ('simpletype -> BOOL','simpletype',1,'p_simpletype','parser.py',212),
  ('simpletype -> STRING','simpletype',1,'p_simpletype','parser.py',213),
  ('simpletype -> VOID','simpletype',1,'p_simpletype','parser.py',214),
  ('type -> simpletype','type',1,'p_type','parser.py',220),
  ('type -> TUPLE IDENTIFIER','type',2,'p_type','parser.py',221),
  ('functions -> <empty>','functions',0,'p_functions','parser.py',230),
  ('functions -> nefunctions','functions',1,'p_functions','parser.py',231),
  ('nefunctions -> function','nefunctions',1,'p_nefunction','parser.py',237),
  ('nefunctions -> function nefunctions','nefunctions',2,'p_nefunction','parser.py',238),
  ('function -> type IDENTIFIER ( arguments ) compoundstm','function',6,'p_function','parser.py',244),
  ('arguments -> <empty>','arguments',0,'p_arguments','parser.py',250),
  ('arguments -> nearguments','arguments',1,'p_arguments','parser.py',251),
  ('nearguments -> argument','nearguments',1,'p_nearguments','parser.py',257),
  ('nearguments -> argument , nearguments','nearguments',3,'p_nearguments','parser.py',258),
  ('argument -> type IDENTIFIER','argument',2,'p_argument','parser.py',264),
  ('sessions -> session','sessions',1,'p_sessions','parser.py',270),
  ('sessions -> session sessions','sessions',2,'p_sessions','parser.py',271),
  ('session -> SESSION IDENTIFIER ( ) compoundstm','session',5,'p_session','parser.py',277),
  ('stms -> <empty>','stms',0,'p_stms','parser.py',283),
  ('stms -> nestms','stms',1,'p_stms','parser.py',284),
  ('nestms -> stm','nestms',1,'p_nestms','parser.py',290),
  ('nestms -> stm nestms','nestms',2,'p_nestms','parser.py',291),
  ('stm -> ;','stm',1,'p_estm','parser.py',297),
  ('stm -> SHOW document receive ;','stm',4,'p_show','parser.py',303),
  ('stm -> EXIT document ;','stm',3,'p_exit','parser.py',309),
  ('stm -> RETURN ;','stm',2,'p_return','parser.py',315),
  ('stm -> RETURN exp ;','stm',3,'p_return','parser.py',316),
  ('stm -> IF ( exp ) compoundstm','stm',5,'p_if','parser.py',327),
  ('stm -> IF ( exp ) compoundstm ELSE compoundstm','stm',7,'p_ifelse','parser.py',333),
  ('stm -> WHILE ( exp ) compoundstm','stm',5,'p_while','parser.py',340),
  ('stm -> compoundstm','stm',1,'p_blockexpstm','parser.py',346),
  ('stm -> exp ;','stm',2,'p_blockexpstm','parser.py',347),
  ('document -> IDENTIFIER','document',1,'p_document','parser.py',354),
  ('document -> PLUG IDENTIFIER [ plugs ]','document',5,'p_document','parser.py',355),
  ('receive -> <empty>','receive',0,'p_receive','parser.py',364),
  ('receive -> RECEIVE [ inputs ]','receive',4,'p_receive','parser.py',365),
  ('compoundstm -> { variables stms }','compoundstm',4,'p_block','parser.py',371),
  ('plugs -> plug','plugs',1,'p_plugs','parser.py',377),
  ('plugs -> plug , plugs','plugs',3,'p_plugs','parser.py',378),
  ('plug -> IDENTIFIER = exp','plug',3,'p_plug','parser.py',384),
  ('inputs -> <empty>','inputs',0,'p_inputs','parser.py',390),
  ('inputs -> neinputs','inputs',1,'p_inputs','parser.py',391),
  ('neinputs -> input','neinputs',1,'p_neinputs','parser.py',397),
  ('neinputs -> input , neinputs','neinputs',3,'p_neinputs','parser.py',398),
  ('input -> lvalue = IDENTIFIER','input',3,'p_input','parser.py',404),
  ('exp -> lvalue = exp','exp',3,'p_binexp','parser.py',410),
  ('exp -> exp EQ exp','exp',3,'p_binexp','parser.py',411),
  ('exp -> exp NEQ exp','exp',3,'p_binexp','parser.py',412),
  ('exp -> exp < exp','exp',3,'p_binexp','parser.py',413),
  ('exp -> exp > exp','exp',3,'p_binexp','parser.py',414),
  ('exp -> exp LTEQ exp','exp',3,'p_binexp','parser.py',415),
  ('exp -> exp GTEQ exp','exp',3,'p_binexp','parser.py',416),
  ('exp -> exp + exp','exp',3,'p_binexp','parser.py',417),
  ('exp -> exp - exp','exp',3,'p_binexp','parser.py',418),
  ('exp -> exp * exp','exp',3,'p_binexp','parser.py',419),
  ('exp -> exp / exp','exp',3,'p_binexp','parser.py',420),
  ('exp -> exp % exp','exp',3,'p_binexp','parser.py',421),
  ('exp -> exp AND exp','exp',3,'p_binexp','parser.py',422),
  ('exp -> exp OR exp','exp',3,'p_binexp','parser.py',423),
  ('exp -> exp LSHIFT exp','exp',3,'p_binexp','parser.py',424),
  ('exp -> exp TADD IDENTIFIER','exp',3,'p_tuplebinaryexp','parser.py',431),
  ('exp -> exp TADD ( identifiers )','exp',5,'p_tuplebinaryexp','parser.py',432),
  ('exp -> exp TSUB IDENTIFIER','exp',3,'p_tuplebinaryexp','parser.py',433),
  ('exp -> exp TSUB ( identifiers )','exp',5,'p_tuplebinaryexp','parser.py',434),
  ('exp -> - exp','exp',2,'p_unaryexp','parser.py',443),
  ('exp -> ! exp','exp',2,'p_unaryexp','parser.py',444),
  ('exp -> lvalue','exp',1,'p_lval','parser.py',450),
  ('exp -> IDENTIFIER ( exps )','exp',4,'p_call','parser.py',456),
  ('exp -> STRING_LITERAL','exp',1,'p_stringliteral','parser.py',462),
  ('exp -> TRUE','exp',1,'p_boolliteral','parser.py',468),
  ('exp -> FALSE','exp',1,'p_boolliteral','parser.py',469),
  ('exp -> INT_LITERAL','exp',1,'p_intliteral','parser.py',478),
  ('exp -> TUPLE { fieldvalues }','exp',4,'p_tupleliteral','parser.py',484),
  ('exp -> ( exp )','exp',3,'p_group','parser.py',490),
  ('exps -> <empty>','exps',0,'p_exps','parser.py',496),
  ('exps -> neexps','exps',1,'p_exps','parser.py',497),
  ('neexps -> exp','neexps',1,'p_neexps','parser.py',503),
  ('neexps -> exp , neexps','neexps',3,'p_neexps','parser.py',504),
  ('lvalue -> IDENTIFIER','lvalue',1,'p_lvalue','parser.py',510),
  ('lvalue -> IDENTIFIER . IDENTIFIER','lvalue',3,'p_lvalue','parser.py',511),
  ('fieldvalues -> <empty>','fieldvalues',0,'p_fieldvalues','parser.py',517),
  ('fieldvalues -> nefieldvalues','fieldvalues',1,'p_fieldvalues','parser.py',518),
  ('nefieldvalues -> fieldvalue','nefieldvalues',1,'p_nefieldvalues','parser.py',524),
  ('nefieldvalues -> fieldvalue , fieldvalues','nefieldvalues',3,'p_nefieldvalues','parser.py',525),
  ('fieldvalue -> IDENTIFIER = exp','fieldvalue',3,'p_fieldvalue','parser.py',532),
]
